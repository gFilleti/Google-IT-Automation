#!/usr/bin/env python3.8
import os
os.chdir("base_files")#with this the scrip can work in any OS
path = os.path.abspath("long_text.txt")# abspath function will return the absolute path of the filename
                                    # in this case i could use path = "long_text.txt" becouse already

file = open(path)#creating a new file object, the parameter is the name of a file
                        # in this we assume the file is in the same directory of the script
                        # but we can pass a path if the file is in another directory
                        #the os checks if we have permition to access the file
                        #if granted it give to the code a File descriptor
                        #with is as token, generated by the OS, that allow progams to
                        #do more opreations with the file
                        # in python this File descriptor is stored as attribute of the object
                        #the file object give us a bunch of methods to operate the File

print('-------------------------file.readline() method-------------------------------------\n')
print(file.readline()) # readline method it reads a single line of the File


print('\n------------------------file.read() method-------------------------------------\n')
print(file.read()) #read method reads form the current position to the end of the File


#by printing the using the readline the the position pass to the second line
#when  the read method its printed the read starts from the second line with is
# the current line and keep util reach the files end

file.close() #close method closes the file, the open-use-close pattern its the
            #tipical way to work with files in most program langagues
            #the first reason: when the file its open in a script the file get lockeddown
            # so no other programs or scrits can use it util its finished
            #second reason: theres a limit of Files descriptors that can be created
            # util the file system is out of them. This can happen whe open files in a loop
            #Thrid reason: leaving open file can lead to race conditions, with occur when
            #multiple proccess try to modifie or read at the same time
            #and can couse all sort of unespected behavior

print('\n-------------------file.readline() inside a with block--------------------------------\n')
with open(path) as file: #In python we can use with block to do a operation with the file
                                 #after the code block is executed the file will be closed
    print(file.readline()) #the print indicates to take a line(readline)data from
                           # the file

#the with block its good for open-use-close a single file and have it automatically closed by the end of the block
#.close() method we can use the file in other places in our code, but we need to remamber too close when is finished
